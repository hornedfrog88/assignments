View(PROJECT.DATA.TEST1)
library('ProjectTemplate')
load.project()
library('ProjectTemplate')
load.project()
View(TOTAL.ENRL.ATTEMPTS.BY.COURSE)
View(config)
View(COURSE.CAPACITY.DATA)
library('ProjectTemplate')
load.project()
View(TOTAL.ENRL.ATTEMPTS.BY.COURSE)
rm(PROJECT.DATA.RAW)
rm(df)
rm(number_of_rows)
View(project_data_local)
rm(project_data_local)
View(project.info)
View(config)
View(project_data_vector)
rm(project_data_vector)
View(project.info)
View(project.info)
View(TOTAL.ENRL.ATTEMPTS.BY.COURSE)
View(TOTAL.ENRL.ATTEMPTS.BY.COURSE)
View(COURSE.CAPACITY.DATA)
library('ProjectTemplate')
load.project()
course_capacity_local <- tbl_df(COURSE.CAPACITY.DATA)
total_enrl_attempts_local <- tbl_df(TOTAL.ENRL.ATTEMPTS.BY.COURSE)
combined_data_local <- merge(total_enrl_attempts_local, course_capacity_local[, c("Term", "SummerIndicator")], by="CourseID")
View(total_enrl_attempts_local)
View(course_capacity_local)
combined_data_local <- merge(total_enrl_attempts_local, course_capacity_local, by= c('CourseID','Term'))
View(combined_data_local)
combined_data_local <- merge(course_capacity_local, total_enrl_attempts_local, by= c('CourseID','Term'))
View(combined_data_local)
training_data_local <- combined_data_local %>% filter(Term < 2182)
test_data_local <- combined_data_local %>% filter(Term >= 2182)
View(training_data_local)
View(training_data_local)
View(training_data_local)
?lm
mode11 <- lm(EnrlTotal ~ Course + TotalCapacity + TotalSections + TotalAttempts, data=training_data_local)
summary(model1)
mode11 <- lm(EnrlTotal ~ TotalCapacity + TotalSections + TotalAttempts, data=training_data_local)
summary(mode11)
mode11 <- lm(EnrlTotal ~ TotalCapacity + TotalSections + TotalAttempts, data=training_data_local)
summary(mode11)
plot(model1)
mode11 <- lm(EnrlTotal ~ TotalCapacity + TotalSections + TotalAttempts, data=training_data_local)
plot(model1)
mode11 <- lm(EnrlTotal ~ TotalCapacity)
mode11 <- lm(EnrlTotal ~ TotalCapacity, data = training_data_local)
#+ TotalSections + TotalAttempts, data=training_data_local)
plot(model1)
fit <- lm(EnrlTotal ~ TotalCapacity, data = training_data_local)
#+ TotalSections + TotalAttempts, data=training_data_local)
#plot(model1)
plot(fit)
View(training_data_local)
fit <- lm(EnrlTotal ~ TotalCapacity + TotalSections + TotalAttempts, data = training_data_local)
#+ TotalSections + TotalAttempts, data=training_data_local)
#plot(model1)
plot(fit)
summary(fit)
fit <- lm(EnrlTotal ~ TotalCapacity + TotalAttempts, data = training_data_local)
summary(fit)
summary(fit)
fit <- lm(EnrlTotal ~ CourseID + TotalCapacity + TotalAttempts, data = training_data_local)
summary(fit)
pairs(training_data_local)
training_data_minimized <- training_data_local %>% select(EnrlTotal, CourseID, TotalCapacity,TotalAttempts)
pairs(training_data_minimized)
training_data_minimized <- training_data_local %>% select(EnrlTotal, CourseID, TotalCapacity,TotalAttempts)
pairs(training_data_minimized)
training_data_minimized <- training_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
pairs(training_data_minimized)
fit <- lm(EnrlTotal ~ TotalSections + TotalCapacity + TotalAttempts, data = training_data_minimized)
summary(fit)
cor(training_data_minimized)
fit <- lm(EnrlTotal ~ TotalSections + TotalCapacity + TotalAttempts, data = training_data_minimized)
summary(fit)
install.packages("rpart.plot")
rpart.plot(fit_rpart)
library('ProjectTemplate')
load.project()
library(rpart)
library(rpart.plot)
rpart.plot(fit_rpart)
rpart.plot(fit_rpart, type = 3, digits = 3, fallen.leaves = TRUE)
fit_rpart <- rpart(EnrlTotal ~ ., data = training_data_minimized, method = "anova")
fit_rpart
rpart.plot(fit_rpart, type = 3, digits = 3, fallen.leaves = TRUE)
library('ProjectTemplate')
load.project()
library(rpart)
library(rpart.plot)
course_capacity_local <- tbl_df(COURSE.CAPACITY.DATA)
total_enrl_attempts_local <- tbl_df(TOTAL.ENRL.ATTEMPTS.BY.COURSE)
combined_data_local <- merge(course_capacity_local, total_enrl_attempts_local, by= c('CourseID','Term'))
training_data_local <- combined_data_local %>% filter(Term < 2182)
test_data_local <- combined_data_local %>% filter(Term >= 2182)
training_data_minimized <- training_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
fit_rpart <- rpart(EnrlTotal ~ ., data = training_data_minimized, method = "anova")
fit_rpart
predict_rpart <- predict(fit_rpart, test_data_minimized)
library('ProjectTemplate')
load.project()
library(rpart)
library(rpart.plot)
course_capacity_local <- tbl_df(COURSE.CAPACITY.DATA)
total_enrl_attempts_local <- tbl_df(TOTAL.ENRL.ATTEMPTS.BY.COURSE)
combined_data_local <- merge(course_capacity_local, total_enrl_attempts_local, by= c('CourseID','Term'))
training_data_local <- combined_data_local %>% filter(Term < 2182)
test_data_local <- combined_data_local %>% filter(Term >= 2182)
training_data_minimized <- training_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
test_data_minimized <- test_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
fit_rpart <- rpart(EnrlTotal ~ ., data = training_data_minimized, method = "anova")
fit_rpart
rpart.plot(fit_rpart, type = 3, digits = 3, fallen.leaves = TRUE)
predict_rpart <- predict(fit_rpart, test_data_minimized)
predict_rpart
predict_rpart <- predict(fit_rpart, test_data_minimized)
MeanAbsoluteError <- MAE(test_data_minimized$EnrlTotal,predict_rpart)
library('ProjectTemplate')
load.project()
course_capacity_local <- tbl_df(COURSE.CAPACITY.DATA)
total_enrl_attempts_local <- tbl_df(TOTAL.ENRL.ATTEMPTS.BY.COURSE)
combined_data_local <- merge(course_capacity_local, total_enrl_attempts_local, by= c('CourseID','Term'))
training_data_local <- combined_data_local %>% filter(Term < 2182)
test_data_local <- combined_data_local %>% filter(Term >= 2182)
training_data_minimized <- training_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
test_data_minimized <- test_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
pairs(training_data_minimized)
cor(training_data_minimized)
predict_linear <- predict(fit, test_data_minimized)
MeanAbsoluteError <- MAE(test_data_minimized$EnrlTotal,predict_linear)
MeanAbsoluteError
predict_linear <- predict(fit, test_data_minimized)
MeanAbsoluteError <- MAE(test_data_minimized$EnrlTotal,predict_linear)
print("The Mean Abosulte Error = ",MeanAbsoluteError)
predict_linear <- predict(fit, test_data_minimized)
MeanAbsoluteError <- MAE(test_data_minimized$EnrlTotal,predict_linear)
print("Mean Absolute Error = $MeanAbsoluteError")
predict_linear <- predict(fit, test_data_minimized)
MeanAbsoluteError <- MAE(test_data_minimized$EnrlTotal,predict_linear)
print("Mean Absolute Error = %MeanAbsoluteError")
predict_linear <- predict(fit, test_data_minimized)
MeanAbsoluteError <- MAE(test_data_minimized$EnrlTotal,predict_linear)
print("Mean Absolute Error = ", MeanAbsoluteError)
predict_linear <- predict(fit, test_data_minimized)
MeanAbsoluteError <- MAE(test_data_minimized$EnrlTotal,predict_linear)
print("The Mean Absolute Error of the Prediction is ", %MeanAbsoluteError)
predict_linear <- predict(fit, test_data_minimized)
MeanAbsoluteError <- MAE(test_data_minimized$EnrlTotal,predict_linear)
print(paste("The Mean Absolute Error of the Prediction is ", MeanAbsoluteError))
predict_linear <- predict(fit, test_data_minimized)
MeanAbsoluteError <- MAE(test_data_minimized$EnrlTotal,predict_linear)
print(paste("The Mean Absolute Error of the Prediction is ", round(MeanAbsoluteError,2))
predict_linear <- predict(fit, test_data_minimized)
MeanAbsoluteError <- MAE(test_data_minimized$EnrlTotal,predict_linear)
print(paste("The Mean Absolute Error of the Prediction is ", round(MeanAbsoluteError,digits = 2))
predict_linear <- predict(fit, test_data_minimized)
MeanAbsoluteError <- MAE(test_data_minimized$EnrlTotal,predict_linear)
round(MeanAbsoluteError, digits = 2)
#print(paste("The Mean Absolute Error of the Prediction is ", #round(MeanAbsoluteError,digits = 2))
predict_linear <- predict(fit, test_data_minimized)
MeanAbsoluteError <- MAE(test_data_minimized$EnrlTotal,predict_linear)
round(MeanAbsoluteError, digits = 2)
print(paste("The Mean Absolute Error of the Prediction is ", round(MeanAbsoluteError, digits = 2)))
library('ProjectTemplate')
load.project()
library(rpart)
library(rpart.plot)
course_capacity_local <- tbl_df(COURSE.CAPACITY.DATA)
total_enrl_attempts_local <- tbl_df(TOTAL.ENRL.ATTEMPTS.BY.COURSE)
combined_data_local <- merge(course_capacity_local, total_enrl_attempts_local, by= c('CourseID','Term'))
training_data_local <- combined_data_local %>% filter(Term < 2182)
test_data_local <- combined_data_local %>% filter(Term >= 2182)
training_data_minimized <- training_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
test_data_minimized <- test_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
fit_rpart <- rpart(EnrlTotal ~ ., data = training_data_minimized, method = "anova")
fit_rpart
rpart.plot(fit_rpart, type = 3, digits = 3, fallen.leaves = TRUE)
predict_rpart <- predict(fit_rpart, test_data_minimized)
MeanAbsoluteError <- MAE(test_data_minimized$EnrlTotal,predict_rpart)
print(paste("The Mean Absolute Error of the Prediction is", round(MeanAbsoluteError, digits = 2)))
library('ProjectTemplate')
load.project()
course_capacity_local <- tbl_df(COURSE.CAPACITY.DATA)
total_enrl_attempts_local <- tbl_df(TOTAL.ENRL.ATTEMPTS.BY.COURSE)
combined_data_local <- merge(course_capacity_local, total_enrl_attempts_local, by= c('CourseID','Term'))
training_data_local <- combined_data_local %>% filter(Term < 2182)
test_data_local <- combined_data_local %>% filter(Term >= 2182)
training_data_minimized <- training_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
test_data_minimized <- test_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
pairs(training_data_minimized)
cor(training_data_minimized)
fit <- lm(EnrlTotal ~ TotalSections + TotalCapacity + TotalAttempts, data = training_data_minimized)
summary(fit)
library('ProjectTemplate')
load.project()
library(rpart)
library(rpart.plot)
course_capacity_local <- tbl_df(COURSE.CAPACITY.DATA)
total_enrl_attempts_local <- tbl_df(TOTAL.ENRL.ATTEMPTS.BY.COURSE)
combined_data_local <- merge(course_capacity_local, total_enrl_attempts_local, by= c('CourseID','Term'))
training_data_local <- combined_data_local %>% filter(Term < 2182)
test_data_local <- combined_data_local %>% filter(Term >= 2182)
training_data_minimized <- training_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
test_data_minimized <- test_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
fit_rpart <- rpart(EnrlTotal ~ ., data = training_data_minimized, method = "anova")
fit_rpart
rpart.plot(fit_rpart, type = 3, digits = 3, fallen.leaves = TRUE)
library('ProjectTemplate')
load.project()
library(rpart)
library(rpart.plot)
course_capacity_local <- tbl_df(COURSE.CAPACITY.DATA)
total_enrl_attempts_local <- tbl_df(TOTAL.ENRL.ATTEMPTS.BY.COURSE)
combined_data_local <- merge(course_capacity_local, total_enrl_attempts_local, by= c('CourseID','Term'))
training_data_local <- combined_data_local %>% filter(Term < 2182)
test_data_local <- combined_data_local %>% filter(Term >= 2182)
training_data_minimized <- training_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
test_data_minimized <- test_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
fit_rpart <- rpart(EnrlTotal ~ ., data = training_data_minimized, method = "anova")
fit_rpart
rpart.plot(fit_rpart, type = 3, digits = 3, fallen.leaves = TRUE)
predict_rpart <- predict(fit_rpart, test_data_minimized)
MeanAbsoluteError <- MAE(test_data_minimized$EnrlTotal,predict_rpart)
print(paste("The Mean Absolute Error of the Prediction is", round(MeanAbsoluteError, digits = 2)))
library('ProjectTemplate')
load.project()
library(rpart)
library(rpart.plot)
course_capacity_local <- tbl_df(COURSE.CAPACITY.DATA)
total_enrl_attempts_local <- tbl_df(TOTAL.ENRL.ATTEMPTS.BY.COURSE)
combined_data_local <- merge(course_capacity_local, total_enrl_attempts_local, by= c('CourseID','Term'))
training_data_local <- combined_data_local %>% filter(Term < 2182)
test_data_local <- combined_data_local %>% filter(Term >= 2182)
training_data_minimized <- training_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
test_data_minimized <- test_data_local %>% select(EnrlTotal, TotalSections, TotalCapacity,TotalAttempts)
fit_rpart <- rpart(EnrlTotal ~ ., data = training_data_minimized, method = "anova")
fit_rpart
rpart.plot(fit_rpart, type = 3, digits = 3, fallen.leaves = TRUE)
predict_rpart <- predict(fit_rpart, test_data_minimized)
MeanAbsoluteError <- MAE(test_data_minimized$EnrlTotal,predict_rpart)
print(paste("The Mean Absolute Error of the Prediction is", round(MeanAbsoluteError, digits = 2)))
install.packages(c("lazyeval", "lubridate", "ProjectTemplate"))
View(course_capacity_local)
head(course_capacity_local)
course_capacity_local$CourseID
char_course_id <- as.character(course_capacity_local$CourseID)
char_course_id
rm(char_course_id)
course_capacity_local$CourseID <- as.character(course_capacity_local$CourseID)
course_capacity_local
head(course_capacity_local)
str(course_capacity_local)
ggplot2(course_capacity_local, aes(x = course_capacity_local$CourseID, y = course_capacity_local$EnrlTotal)) + geom_plot()
ggplot(course_capacity_local, aes(x = course_capacity_local$CourseID, y = course_capacity_local$EnrlTotal)) + geom_plot()
library(ggplot2)
ggplot(course_capacity_local, aes(x = course_capacity_local$CourseID, y = course_capacity_local$EnrlTotal)) + geom_plot()
ggplot(course_capacity_local, aes(x = course_capacity_local$CourseID, y = course_capacity_local$EnrlTotal)) + geom_dotplot()
ggplot(course_capacity_local, aes(x = course_capacity_local$CourseID, y = course_capacity_local$EnrlTotal)) + geom_dotplot(binwidth = .1)
ggplot(course_capacity_local, aes(x = course_capacity_local$CourseID, y = course_capacity_local$EnrlTotal)) + geom_dotplot(binwidth = 100)
ggplot(course_capacity_local, aes(x = course_capacity_local$CourseID, y = course_capacity_local$EnrlTotal)) + geom_dotplot(binwidth = 1)
ggplot(course_capacity_local, aes(x = course_capacity_local$CourseID, y = course_capacity_local$EnrlTotal)) + geom_dotplot(binwidth = 10000)
library('ProjectTemplate')
load.project()
math_crse_data <- training_data_minimized %>%
filter(grepl('MATH', Course))
math_crse_data
rm(math_crse_data)
chem_crse_data <- training_data_minimized %>%
filter(grepl('CHEM', Course))
View(chem_crse_data)
chem_crse_data <- training_data_minimized %>%
filter(grepl('COMPSCI', Course))
View(chem_crse_data)
chem_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
View(chem_crse_data)
rm(chem_crse_data)
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(x = TotalCapacity, y = lEnrlTotal)) + geom_point()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(x = TotalCapacity, y = EnrlTotal)) + geom_point()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(x = TotalSections, y = EnrlTotal)) + geom_point()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(x = Course, y = EnrlTotal), fill = Term) + geom_Bar()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(x = Course, y = EnrlTotal), fill = Term) + geom_bar()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(x = Course, y = EnrlTotal)) + geom_bar()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(x = Course fill(Term))) + geom_bar()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(x = Course fill=(Term))) + geom_bar()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(x = Course), fill=(Term))) + geom_bar()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(x = Course), fill=(Term)) + geom_bar()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(x = Course, y = EnrlTotal), fill=(Term)) + geom_bar()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(x = Course, y = EnrlTotal), fill=(Term)) + geom_point()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(x = CourseID, y = EnrlTotal), fill=(Term)) + geom_point()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(x = CourseID, y = EnrlTotal), fill=(Term)) + geom_bar()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(CourseID, EnrlTotal)) + geom_area(aes(fill = Term))
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(CourseID, EnrlTotal)) + geom_area()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(CourseID, EnrlTotal)) + geom_area(fill = Term)
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(CourseID, EnrlTotal)) +
geom_area(aes(fill = Term))
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(CourseID, EnrlTotal)) +
geom_boxplot(aes(fill = Term))
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(CourseID, EnrlTotal)) +
geom_density(aes(fill = Term))
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(CourseID, EnrlTotal)) +
geom_rug(aes(fill = Term))
library('ProjectTemplate')
load.project()
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(CourseID, EnrlTotal)) +
geom(aes(fill = Term))
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(CourseID, EnrlTotal)) +
geom_line(aes(fill = Term))
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(CourseID, EnrlTotal)) +
geom_point(aes(color = factor(Term))
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(CourseID, EnrlTotal)) +
geom_point(aes(color = factor(Term)))
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(Term, EnrlTotal)) +
geom_point(aes(color = factor(CourseID)))
View(test_data_minimized)
View(datasci_crse_data)
datasci_crse_data <- training_data_minimized %>%
filter(grepl('DATASCI', Course))
ggplot(datasci_crse_data, aes(TotalCapacity, EnrlTotal)) +
geom_point(aes(color = factor(CourseID)))
library('ProjectTemplate')
load.project()
View(final_data_set)
View(final_testing_set)
View(final_training_set)
View(course_capacity_local)
library('ProjectTemplate')
load.project()
library('ProjectTemplate')
load.project()
View(final_training_set)
#Use the train function in the caret package to sample and test models
c1 <- makeCluster(detectCores())
registerDoParallel(c1)
rf_fit <- train(EnrlTotal~.,data = final_training_set,method = "rf")
#Use the train function in the caret package to sample and test models
c1 <- makeCluster(detectCores())
registerDoParallel(c1)
rf_fit <- train(EnrlTotal~.,data = final_training_set,method = "rf")
stopCluster(c1)
library('ProjectTemplate')
load.project()
#Use the train function in the caret package to sample and test models
c1 <- makeCluster(detectCores())
registerDoParallel(c1)
rf_fit <- train(EnrlTotal~.,data = final_training_set,method = "rf")
#Use the train function in the caret package to sample and test models
c1 <- makeCluster(detectCores())
control <- trainControl(method = "rf",number = 10,allowParallel = TRUE)
rf_fit <- train(EnrlTotal~.,data = final_training_set,method = "rf",trControl = control)
View(c1)
#Use the train function in the caret package to sample and test models
set.seed(42)
c1 <- makeCluster(detectCores())
control <- trainControl(method = "boot",number = ifelse(grepl("cv",method),10,25), allowParallel = TRUE)
control <- trainControl(method = "boot",number = ifelse(grepl("cv","boot"),10,25), allowParallel = TRUE)
rf_fit <- train(EnrlTotal~.,data = final_training_set,method = "rf",trControl = control)
stopCluster(c1)
#Use the train function in the caret package to sample and test models
set.seed(42)
c1 <- makeCluster(detectCores())
control <- trainControl(method = "boot",number = ifelse(grepl("cv","boot"),10,25), allowParallel = TRUE)
rf_fit <- train(EnrlTotal~CourseID+Term+TotalSections+TotalCapacity,data = final_training_set,method = "rf",trControl = control)
stopCluster(c1)
View(rf_fit)
summary(rf_fit)
#Use the train function in the caret package to sample and test models
set.seed(42)
c1 <- makeCluster(detectCores())
control <- trainControl(method = "boot",number = ifelse(grepl("cv","boot"),10,25), allowParallel = TRUE)
rf_fit <- train(EnrlTotal~CourseID+Term+TotalSections+TotalCapacity,data = final_training_set,method = "glm",trControl = control)
stopCluster(c1)
summary(rf_fit)
#Use the train function in the caret package to sample and test models
c1 <- makeCluster(detectCores())
control <- trainControl(method = "boot",number = 10, allowParallel = TRUE)
rf_fit <- train(EnrlTotal~CourseID+Term+TotalSections+TotalCapacity,data = final_training_set,method = "glm",trControl = control)
stopCluster(c1)
summary(rf_fit)
View(rf_fit)
predict_glm <- predict(rf_fit, final_testing_set)
MAE_glm <- MAE(final_testing_set$EnrlTotal,predict_glm)
print(paste("The Mean Absolute Error of the Prediction is", round(MAE_glm, digits = 2)))
#Use the train function in the caret package to sample and test models
c1 <- makeCluster(detectCores())
control <- trainControl(method = "boot",number = 10, allowParallel = TRUE)
rf_fit <- train(EnrlTotal~CourseID+Term+TotalSections+TotalCapacity,data = final_training_set,method = "rf",trControl = control)
stopCluster(c1)
summary(rf_fit)
predict_rf <- predict(rf_fit, final_testing_set)
MAE_rf <- MAE(final_testing_set$EnrlTotal,predict_rf)
print(paste("The Mean Absolute Error of the Prediction is", round(MAE_glm, digits = 2)))
#Use the train function in the caret package to sample and test models
c1 <- makeCluster(detectCores())
control <- trainControl(method = "boot",number = 10, allowParallel = TRUE)
rf_fit <- train(EnrlTotal~CourseID+Term+TotalSections+TotalCapacity,data = final_training_set,method = "rf",trControl = control)
stopCluster(c1)
summary(rf_fit)
predict_rf <- predict(rf_fit, final_testing_set)
MAE_rf <- MAE(final_testing_set$EnrlTotal,predict_rf)
print(paste("The Mean Absolute Error of the Prediction is", round(MAE_rf, digits = 2)))
#Use the train function from the caret package to create samples and run a random forest model
c1 <- makeCluster(detectCores())
control <- trainControl(method = "boot",number = 10, allowParallel = TRUE)
rf_fit <- train(EnrlTotal~CourseID+Term+TotalSections+TotalCapacity,data = final_training_set,method = "rf",trControl = control)
stopCluster(c1)
summary(rf_fit)
predict_rf <- predict(rf_fit, final_testing_set)
MAE_rf <- MAE(final_testing_set$EnrlTotal,predict_rf)
RMSE_rf <- RMSE(final_testing_set$EnrlTotal,predict_rf)
print(paste("The Mean Absolute Error of the Prediction is", round(MAE_rf, digits = 2)))
print(paste("The Root Mean Squared Error of the Prediction is", round(RMSE_rf, digits = 2)))
#Multiple Linear Regression Model
#Plot some data
plot_linear <- ggplot(final_training_set,aes(TotalCapacity,EnrlTotal,color = CourseID)) +
geom_point()
plot_linear
#Fit the model
l_fit <- lm(EnrlTotal ~ TotalCapacity +
TotalSections + CourseID + Term, data = final_training_set)
summary(l_fit)
#Run the predict function on the final test dataset and analyze the results by calculating the Mean Absolute Error of the prediction.
predict_linear <- predict(l_fit, final_testing_set)
MAE_linear <- MAE(final_testing_set$EnrlTotal,predict_linear)
RMSE_linear <- RMSE(final_testing_set$EnrlTotal,predict_linear)
print(paste("The Mean Absolute Error of the Prediction is", round(MAE_linear, digits = 2)))
print(paste("The Root Mean Squared Error of the Prediction is", round(RMSE_linear, digits = 2)))
rm(MAE_glm)
rm(predict.glm)
rm(predict_glm)
# Create a Recursive Partition Regression Tree Model
fit_rpart <- rpart(EnrlTotal ~ TotalCapacity +
TotalSections + CourseID + Term, data = final_training_set, method = "anova")
# Plot the resulting rpart tree using the rpart.plot function to display a more succint plot of the tree
plot_rpart <- rpart.plot(fit_rpart, type = 3, digits = 3, fallen.leaves = TRUE)
#Run the predict function on the final test dataset and analyze the results by calculating the Mean Absolute Error of the prediction.
predict_rpart <- predict(fit_rpart, final_testing_set)
MAE_rpart <- MAE(final_testing_set$EnrlTotal,predict_rpart)
RMSE_rpart <- RMSE(final_testing_set$EnrlTotal,predict_rpart)
print(paste("The Mean Absolute Error of the Prediction is", round(MAE_rpart, digits = 2)))
print(paste("The Root Mean Squared Error of the Prediction is", round(RMSE_rpart, digits = 2)))
#Use the train function from the caret package to create samples and create a random forest model
c1 <- makeCluster(detectCores())
control <- trainControl(method = "boot",number = 10, allowParallel = TRUE)
rf_fit <- train(EnrlTotal~CourseID+Term+TotalSections+TotalCapacity,data = final_data_set,method = "rf",trControl = control)
stopCluster(c1)
summary(rf_fit)
predict_rf <- predict(rf_fit, final_testing_set)
MAE_rf <- MAE(final_testing_set$EnrlTotal,predict_rf)
RMSE_rf <- RMSE(final_testing_set$EnrlTotal,predict_rf)
print(paste("The Mean Absolute Error of the Prediction is", round(MAE_rf, digits = 2)))
print(paste("The Root Mean Squared Error of the Prediction is", round(RMSE_rf, digits = 2)))
install.packages("yaml")
